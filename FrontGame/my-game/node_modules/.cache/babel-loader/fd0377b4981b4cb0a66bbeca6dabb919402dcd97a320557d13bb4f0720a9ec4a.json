{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\FrontGame\\\\my-game\\\\src\\\\BattlePage.js\",\n  _s = $RefreshSig$();\n// BattlePage.js\nimport { useState, useEffect, useRef } from \"react\";\nimport { setStartBattle } from \"./api.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BattlePage = ({\n  state\n}) => {\n  _s();\n  const [hp, setHp] = useState(100);\n  const [hpEnemy, setHpEnemy] = useState(100);\n  const [battleState, setBattleState] = useState({});\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    const fetchBattleState = async () => {\n      const result = await setStartBattle(state, hp, hpEnemy);\n      setBattleState(result);\n      const number = result.data; // assume the server returns a number\n\n      if (number < 10) {\n        setHp(hp - 15); // enemy attacks, player HP decreases\n      } else {\n        setHpEnemy(hpEnemy - 10); // player attacks, enemy HP decreases\n      }\n\n      // check if the battle is over\n      if (hp <= 0) {\n        sendStatus('lose');\n      } else if (hpEnemy <= 0) {\n        sendStatus('win');\n      }\n    };\n    fetchBattleState(); // initial fetch\n\n    intervalRef.current = setInterval(fetchBattleState, 1000); // fetch every 1 second\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [state, hp, hpEnemy]);\n  const sendStatus = async status => {\n    await setStartBattle(state, hp, hpEnemy, status);\n    console.log(`Battle ended with status: ${status}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Battle Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Player HP: \", hp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Enemy HP: \", hpEnemy]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battle State: \", JSON.stringify(battleState)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(BattlePage, \"EvuTkxYP/9W5qpyRun7h5G+Y4do=\");\n_c = BattlePage;\nexport default BattlePage;\nvar _c;\n$RefreshReg$(_c, \"BattlePage\");","map":{"version":3,"names":["useState","useEffect","useRef","setStartBattle","jsxDEV","_jsxDEV","BattlePage","state","_s","hp","setHp","hpEnemy","setHpEnemy","battleState","setBattleState","intervalRef","fetchBattleState","result","number","data","sendStatus","current","setInterval","clearInterval","status","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Projects/FrontGame/my-game/src/BattlePage.js"],"sourcesContent":["// BattlePage.js\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { setStartBattle } from \"./api.js\";\r\n\r\nconst BattlePage = ({ state }) => {\r\n  const [hp, setHp] = useState(100);\r\n  const [hpEnemy, setHpEnemy] = useState(100);\r\n  const [battleState, setBattleState] = useState({});\r\n  const intervalRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchBattleState = async () => {\r\n      const result = await setStartBattle(state, hp, hpEnemy);\r\n      setBattleState(result);\r\n\r\n      const number = result.data; // assume the server returns a number\r\n\r\n      if (number < 10) {\r\n        setHp(hp - 15); // enemy attacks, player HP decreases\r\n      } else {\r\n        setHpEnemy(hpEnemy - 10); // player attacks, enemy HP decreases\r\n      }\r\n\r\n      // check if the battle is over\r\n      if (hp <= 0) {\r\n        sendStatus('lose');\r\n      } else if (hpEnemy <= 0) {\r\n        sendStatus('win');\r\n      }\r\n    };\r\n\r\n    fetchBattleState(); // initial fetch\r\n\r\n    intervalRef.current = setInterval(fetchBattleState, 1000); // fetch every 1 second\r\n\r\n    return () => {\r\n      clearInterval(intervalRef.current);\r\n    };\r\n  }, [state, hp, hpEnemy]);\r\n\r\n  const sendStatus = async (status) => {\r\n    await setStartBattle(state, hp, hpEnemy, status);\r\n    console.log(`Battle ended with status: ${status}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Battle Page</h2>\r\n      <p>Player HP: {hp}</p>\r\n      <p>Enemy HP: {hpEnemy}</p>\r\n      <p>Battle State: {JSON.stringify(battleState)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BattlePage;"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC;EACjC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,GAAG,CAAC;EAC3C,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAMe,WAAW,GAAGb,MAAM,CAAC,IAAI,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMe,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,MAAM,GAAG,MAAMd,cAAc,CAACI,KAAK,EAAEE,EAAE,EAAEE,OAAO,CAAC;MACvDG,cAAc,CAACG,MAAM,CAAC;MAEtB,MAAMC,MAAM,GAAGD,MAAM,CAACE,IAAI,CAAC,CAAC;;MAE5B,IAAID,MAAM,GAAG,EAAE,EAAE;QACfR,KAAK,CAACD,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACLG,UAAU,CAACD,OAAO,GAAG,EAAE,CAAC,CAAC,CAAC;MAC5B;;MAEA;MACA,IAAIF,EAAE,IAAI,CAAC,EAAE;QACXW,UAAU,CAAC,MAAM,CAAC;MACpB,CAAC,MAAM,IAAIT,OAAO,IAAI,CAAC,EAAE;QACvBS,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDJ,gBAAgB,CAAC,CAAC,CAAC,CAAC;;IAEpBD,WAAW,CAACM,OAAO,GAAGC,WAAW,CAACN,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;;IAE3D,OAAO,MAAM;MACXO,aAAa,CAACR,WAAW,CAACM,OAAO,CAAC;IACpC,CAAC;EACH,CAAC,EAAE,CAACd,KAAK,EAAEE,EAAE,EAAEE,OAAO,CAAC,CAAC;EAExB,MAAMS,UAAU,GAAG,MAAOI,MAAM,IAAK;IACnC,MAAMrB,cAAc,CAACI,KAAK,EAAEE,EAAE,EAAEE,OAAO,EAAEa,MAAM,CAAC;IAChDC,OAAO,CAACC,GAAG,CAAC,6BAA6BF,MAAM,EAAE,CAAC;EACpD,CAAC;EAED,oBACEnB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB1B,OAAA;MAAAsB,QAAA,GAAG,aAAW,EAAClB,EAAE;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB1B,OAAA;MAAAsB,QAAA,GAAG,YAAU,EAAChB,OAAO;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B1B,OAAA;MAAAsB,QAAA,GAAG,gBAAc,EAACK,IAAI,CAACC,SAAS,CAACpB,WAAW,CAAC;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACvB,EAAA,CAjDIF,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAmDhB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}