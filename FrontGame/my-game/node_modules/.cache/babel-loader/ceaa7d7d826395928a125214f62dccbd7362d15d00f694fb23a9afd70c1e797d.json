{"ast":null,"code":"// src/api.js\nconst loginPlayer=async(username,password)=>{const url=new URL(\"http://localhost:8080/auth\");const data={username:username,password:password};// создаем объект с данными\nconst response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)// преобразуем объект в строку JSON и передаем в теле запроса\n});const result=await response.json();return result;};const registerPlayer=async(username,password)=>{const url=new URL(\"http://localhost:8080/registr\");const data={login:username,password:password};const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)// преобразуем объект в строку JSON и передаем в теле запроса\n});const result=await response.json();return result;};const getPlayer=async(name,userId)=>{const apiUrl='http://localhost:8080/newgame';const url=new URL(apiUrl);const data={Name:name,UserId:userId};const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)// преобразуем объект в строку JSON и передаем в теле запроса\n});const result=await response.json();return result;};const loadPlayer=async userID=>{const url=new URL(\"http://localhost:8080/load\");url.searchParams.set('user',userID);const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'}});const result=await response.json();return result;};const setMove=async move=>{const url=new URL(\"http://localhost:8080/move\");url.searchParams.set('direction',move);const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'}});const result=await response.json();return result;};const setNpc=async playerId=>{const url=new URL(\"http://localhost:8080/battle\");url.searchParams.set('playerID',playerId);const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Content-Type':'application/json'}});const result=await response.json();return result;};// api.js\nconst setStartBattle=async status=>{const url=new URL(\"http://localhost:8080/getbattle\");const data={coin:status};// создаем объект с данными\nconst response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)// преобразуем объект в строку JSON и передаем в теле запроса\n});const result=response.json();return result;};const SetExp=async(status1,status2,exp,playerId)=>{const url=new URL(\"http://localhost:8080/newLvl\");const data={EnemyId:parseInt(status1),ExpNewLvl:parseInt(status2),MeExp:parseInt(exp),playerId:parseInt(playerId)};const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)// преобразуем объект в строку JSON и передаем в теле запроса\n});const result=response.json();return result;};const initPlayer=async playerId=>{const url=new URL(\"http://localhost:8080/initPlayer\");url.searchParams.set('player',playerId);const response=await fetch(url,{method:'POST',mode:'cors',headers:{'Content-Type':'application/json'}});const result=await response.json();return result;};export{getPlayer,setMove,setNpc,setStartBattle,SetExp,initPlayer,loginPlayer,registerPlayer,loadPlayer};","map":{"version":3,"names":["loginPlayer","username","password","url","URL","data","response","fetch","method","mode","headers","body","JSON","stringify","result","json","registerPlayer","login","getPlayer","name","userId","apiUrl","Name","UserId","loadPlayer","userID","searchParams","set","setMove","move","setNpc","playerId","setStartBattle","status","coin","SetExp","status1","status2","exp","EnemyId","parseInt","ExpNewLvl","MeExp","initPlayer"],"sources":["C:/Projects/RPGgame/RPGgame/FrontGame/my-game/src/api.js"],"sourcesContent":["// src/api.js\r\nconst loginPlayer = async(username, password)=>{\r\n  const url = new URL(\"http://localhost:8080/auth\")\r\n  const data = { username: username, password: password }; // создаем объект с данными\r\n  \r\n  const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n    })\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n  \r\n  const registerPlayer = async(username, password)=>{\r\n    const url = new URL(\"http://localhost:8080/registr\")\r\n    const data = { login: username, password: password };\r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n    })\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n  \r\n  \r\n  const getPlayer = async (name,userId) => {\r\n    const apiUrl = 'http://localhost:8080/newgame';\r\n    const url = new URL(apiUrl);\r\n    const data = {Name: name, UserId: userId}\r\n  \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n   \r\n  };\r\n\r\n  const loadPlayer = async(userID)=>{\r\n    const url = new URL(\"http://localhost:8080/load\")\r\n    url.searchParams.set('user', userID)\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    const result = await response.json()\r\n    return result\r\n  }\r\n\r\n\r\nconst setMove = async(move)=>{\r\n    const url = new URL(\"http://localhost:8080/move\")\r\n\r\n    url.searchParams.set('direction', move);\r\n    const response = await fetch(url,{\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      const result = await response.json();\r\n      return result;\r\n}\r\n\r\n\r\nconst setNpc = async(playerId)=>{\r\n  const url = new URL(\"http://localhost:8080/battle\")\r\n  url.searchParams.set('playerID', playerId)\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    const result = await response.json()\r\n    return result\r\n}\r\n\r\n// api.js\r\nconst setStartBattle = async (status) => {\r\n    const url = new URL(\"http://localhost:8080/getbattle\")\r\n    const data = { coin: status }; // создаем объект с данными\r\n    \r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n    })\r\n    \r\n    const result =  response.json();\r\n    return result;\r\n\r\n  };\r\n\r\nconst SetExp = async (status1, status2, exp, playerId) =>{\r\n  const url = new URL(\"http://localhost:8080/newLvl\")\r\n  const data = { EnemyId: parseInt(status1), ExpNewLvl: parseInt(status2), MeExp: parseInt(exp), playerId: parseInt(playerId)}\r\n  const response  = await fetch(url, {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n})\r\n\r\nconst result = response.json()\r\nreturn result\r\n\r\n}\r\nconst initPlayer = async (playerId)=>{\r\n  const url = new URL(\"http://localhost:8080/initPlayer\")\r\n  url.searchParams.set('player', playerId)\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\nconst result = await response.json()\r\n\r\nreturn result\r\n}\r\n\r\nexport  { getPlayer, setMove, setNpc, setStartBattle, SetExp, initPlayer, loginPlayer, registerPlayer, loadPlayer };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}