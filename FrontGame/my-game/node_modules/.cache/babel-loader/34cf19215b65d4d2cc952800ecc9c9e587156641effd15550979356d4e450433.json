{"ast":null,"code":"// src/api.js\nconst apiUrl = 'http://localhost:8080/newgame';\nconst loginPlayer = async (username, password) => {\n  const url = new URL(\"http://localhost:8080/auth\");\n  const data = {\n    username: username,\n    password: password\n  }; // создаем объект с данными\n\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data) // преобразуем объект в строку JSON и передаем в теле запроса\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n};\nconst getPlayer = async name => {\n  const url = new URL(apiUrl);\n  url.searchParams.set('name', name);\n  const response = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n};\nconst setMove = async move => {\n  const url = new URL(\"http://localhost:8080/move\");\n  url.searchParams.set('direction', move);\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n};\nconst setNpc = async () => {\n  const url = new URL(\"http://localhost:8080/battle\");\n  const response = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n};\n\n// api.js\nconst setStartBattle = async status => {\n  const url = new URL(\"http://localhost:8080/getbattle\");\n  const data = {\n    coin: status\n  }; // создаем объект с данными\n\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data) // преобразуем объект в строку JSON и передаем в теле запроса\n  });\n  const result = response.json();\n  console.log(11);\n  console.log(result);\n  return result;\n};\nconst SetExp = async (status1, status2, exp) => {\n  const url = new URL(\"http://localhost:8080/newLvl\");\n  const data = {\n    EnemyId: parseInt(status1),\n    ExpNewLvl: parseInt(status2),\n    MeExp: parseInt(exp)\n  };\n  console.log(status2);\n  console.log(data);\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data) // преобразуем объект в строку JSON и передаем в теле запроса\n  });\n  const result = response.json();\n  console.log(result);\n  return result;\n};\n_c = SetExp;\nconst initPlayer = async () => {\n  const url = new URL(\"http://localhost:8080/initPlayer\");\n  const response = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n};\nexport { getPlayer, setMove, setNpc, setStartBattle, SetExp, initPlayer, loginPlayer };\nvar _c;\n$RefreshReg$(_c, \"SetExp\");","map":{"version":3,"names":["apiUrl","loginPlayer","username","password","url","URL","data","response","fetch","method","mode","headers","body","JSON","stringify","result","json","console","log","getPlayer","name","searchParams","set","setMove","move","setNpc","setStartBattle","status","coin","SetExp","status1","status2","exp","EnemyId","parseInt","ExpNewLvl","MeExp","_c","initPlayer","$RefreshReg$"],"sources":["C:/Projects/RPGgame/RPGgame/FrontGame/my-game/src/api.js"],"sourcesContent":["// src/api.js\r\nconst apiUrl = 'http://localhost:8080/newgame';\r\nconst loginPlayer = async(username, password)=>{\r\n  const url = new URL(\"http://localhost:8080/auth\")\r\n  const data = { username: username, password: password }; // создаем объект с данными\r\n    \r\n  const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n          'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n  })\r\n  const result = await response.json();\r\n  console.log(result)\r\n  return result;\r\n}\r\n\r\n\r\n\r\n\r\nconst getPlayer = async (name) => {\r\n    const url = new URL(apiUrl);\r\n    url.searchParams.set('name', name);\r\n  \r\n    const response = await fetch(url, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const result = await response.json();\r\n    console.log(result)\r\n    return result;\r\n   \r\n  };\r\nconst setMove = async(move)=>{\r\n    const url = new URL(\"http://localhost:8080/move\")\r\n\r\n    url.searchParams.set('direction', move);\r\n    const response = await fetch(url,{\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      const result = await response.json();\r\n      console.log(result)\r\n      return result;\r\n}\r\n\r\n\r\nconst setNpc = async()=>{\r\n    const url = new URL(\"http://localhost:8080/battle\")\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    const result = await response.json()\r\n    console.log(result)\r\n    return result\r\n}\r\n\r\n// api.js\r\nconst setStartBattle = async (status) => {\r\n    const url = new URL(\"http://localhost:8080/getbattle\")\r\n    const data = { coin: status }; // создаем объект с данными\r\n    \r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n    })\r\n    \r\n    const result =  response.json();\r\n    console.log(11)\r\n    console.log(result)\r\n    return result;\r\n\r\n  };\r\n\r\nconst SetExp = async (status1, status2, exp) =>{\r\n  const url = new URL(\"http://localhost:8080/newLvl\")\r\n  const data = { EnemyId: parseInt(status1), ExpNewLvl: parseInt(status2), MeExp: parseInt(exp)}\r\n  console.log(status2)\r\n  console.log(data)\r\n  const response  = await fetch(url, {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data), // преобразуем объект в строку JSON и передаем в теле запроса\r\n})\r\n\r\nconst result = response.json()\r\nconsole.log(result)\r\nreturn result\r\n\r\n}\r\nconst initPlayer = async ()=>{\r\n  const url = new URL(\"http://localhost:8080/initPlayer\")\r\n \r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    mode: 'cors',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\nconst result = await response.json()\r\nconsole.log(result)\r\nreturn result\r\n}\r\n\r\nexport  { getPlayer, setMove, setNpc, setStartBattle, SetExp, initPlayer, loginPlayer};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}