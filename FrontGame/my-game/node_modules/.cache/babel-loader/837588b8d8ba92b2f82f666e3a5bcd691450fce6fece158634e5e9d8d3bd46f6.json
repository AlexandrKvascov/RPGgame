{"ast":null,"code":"// src/api.js\nconst apiUrl = 'http://localhost:8080/newgame';\nconst getPlayer = async name => {\n  const url = new URL(apiUrl);\n  url.searchParams.set('name', name);\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const player = await response.json();\n  return player;\n};\nconst setMove = async move => {\n  const url = new URL(\"http://localhost:8080/move\");\n  url.searchParams.set('direction', move);\n  const response = await fetch(url, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  return result;\n};\nconst setNpc = async () => {\n  const url = new URL(\"http://localhost:8080/battle\");\n  const response = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const result = await response.json();\n  return result;\n};\nconst SetStartBattle = async state => {\n  const socketUrl = 'ws://localhost:8080/getbattle';\n  const socket = new WebSocket(socketUrl);\n  socket.onopen = () => {\n    console.log('Connected to WebSocket');\n    socket.send(JSON.stringify({\n      status: state\n    }));\n  };\n  socket.onmessage = event => {\n    const result = JSON.parse(event.data);\n    console.log(result);\n    return result;\n  };\n  socket.onerror = event => {\n    console.error('Error occurred while connecting to WebSocket:', event);\n  };\n  socket.onclose = () => {\n    console.log('WebSocket connection closed');\n  };\n};\n_c = SetStartBattle;\nexport { getPlayer, setMove, setNpc, SetStartBattle };\nvar _c;\n$RefreshReg$(_c, \"SetStartBattle\");","map":{"version":3,"names":["apiUrl","getPlayer","name","url","URL","searchParams","set","response","fetch","method","mode","headers","player","json","setMove","move","result","setNpc","SetStartBattle","state","socketUrl","socket","WebSocket","onopen","console","log","send","JSON","stringify","status","onmessage","event","parse","data","onerror","error","onclose","_c","$RefreshReg$"],"sources":["C:/Projects/FrontGame/my-game/src/api.js"],"sourcesContent":["// src/api.js\r\nconst apiUrl = 'http://localhost:8080/newgame';\r\n\r\nconst getPlayer = async (name) => {\r\n    const url = new URL(apiUrl);\r\n    url.searchParams.set('name', name);\r\n  \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const player = await response.json();\r\n    return player;\r\n  };\r\nconst setMove = async(move)=>{\r\n    const url = new URL(\"http://localhost:8080/move\")\r\n\r\n    url.searchParams.set('direction', move);\r\n    const response = await fetch(url,{\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      const result = await response.json();\r\n      return result;\r\n}\r\n\r\n\r\nconst setNpc = async()=>{\r\n    const url = new URL(\"http://localhost:8080/battle\")\r\n    const response = await fetch(url, {\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    const result = await response.json()\r\n    return result\r\n}\r\n\r\nconst SetStartBattle = async (state) => {\r\n    const socketUrl = 'ws://localhost:8080/getbattle';\r\n    const socket = new WebSocket(socketUrl);\r\n  \r\n    socket.onopen = () => {\r\n      console.log('Connected to WebSocket');\r\n      socket.send(JSON.stringify({ status: state }));\r\n    };\r\n  \r\n    socket.onmessage = (event) => {\r\n      const result = JSON.parse(event.data);\r\n      console.log(result);\r\n      return result;\r\n    };\r\n  \r\n    socket.onerror = (event) => {\r\n      console.error('Error occurred while connecting to WebSocket:', event);\r\n    };\r\n  \r\n    socket.onclose = () => {\r\n      console.log('WebSocket connection closed');\r\n    };\r\n  };\r\n\r\nexport  { getPlayer, setMove, setNpc, SetStartBattle};"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG,+BAA+B;AAE9C,MAAMC,SAAS,GAAG,MAAOC,IAAI,IAAK;EAC9B,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACJ,MAAM,CAAC;EAC3BG,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAElC,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;IAChCM,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EACpC,OAAOD,MAAM;AACf,CAAC;AACH,MAAME,OAAO,GAAG,MAAMC,IAAI,IAAG;EACzB,MAAMZ,GAAG,GAAG,IAAIC,GAAG,CAAC,4BAA4B,CAAC;EAEjDD,GAAG,CAACE,YAAY,CAACC,GAAG,CAAC,WAAW,EAAES,IAAI,CAAC;EACvC,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAC;IAC7BM,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMK,MAAM,GAAG,MAAMT,QAAQ,CAACM,IAAI,CAAC,CAAC;EACpC,OAAOG,MAAM;AACnB,CAAC;AAGD,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAS;EACpB,MAAMd,GAAG,GAAG,IAAIC,GAAG,CAAC,8BAA8B,CAAC;EACnD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;IAC9BM,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACJ,MAAMK,MAAM,GAAG,MAAMT,QAAQ,CAACM,IAAI,CAAC,CAAC;EACpC,OAAOG,MAAM;AACjB,CAAC;AAED,MAAME,cAAc,GAAG,MAAOC,KAAK,IAAK;EACpC,MAAMC,SAAS,GAAG,+BAA+B;EACjD,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAACF,SAAS,CAAC;EAEvCC,MAAM,CAACE,MAAM,GAAG,MAAM;IACpBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCJ,MAAM,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,MAAM,EAAEV;IAAM,CAAC,CAAC,CAAC;EAChD,CAAC;EAEDE,MAAM,CAACS,SAAS,GAAIC,KAAK,IAAK;IAC5B,MAAMf,MAAM,GAAGW,IAAI,CAACK,KAAK,CAACD,KAAK,CAACE,IAAI,CAAC;IACrCT,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;IACnB,OAAOA,MAAM;EACf,CAAC;EAEDK,MAAM,CAACa,OAAO,GAAIH,KAAK,IAAK;IAC1BP,OAAO,CAACW,KAAK,CAAC,+CAA+C,EAAEJ,KAAK,CAAC;EACvE,CAAC;EAEDV,MAAM,CAACe,OAAO,GAAG,MAAM;IACrBZ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C,CAAC;AACH,CAAC;AAACY,EAAA,GAtBEnB,cAAc;AAwBpB,SAAUjB,SAAS,EAAEa,OAAO,EAAEG,MAAM,EAAEC,cAAc;AAAE,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}